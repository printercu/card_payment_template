doctype html
html
  head
    / ВНИМАНИЕ! Перед отправкой на проверку из файлов необходимо удалить
    / все комментарии, весь код для отладки (console.log, и т.д.),
    / а также все неиспользуемые блоки кода
    / Slim не рендерит комментарии, начинающиеся с /, их можно не удалять.
    /
    / При написании шаблона сохроаняем все условные позиции (блоков /-- --),
    / и имена маркеров ({{...}})
    meta content='text/html; charset=utf-8' http-equiv='Content-Type'
    title= t('title')

    / Здесь сохраняем адресацию до файла. www файл назван, чтобы было понятно,
    / что его надо положить в www вашего домена. чтобы пути правильно работали
    link href='css/style.css' rel='stylesheet' type='text/css'
    link href='css/ministyle.css' rel='stylesheet' type='text/css'
    link href='css/jquery-ui.css' rel='stylesheet' type='text/css'
    script src='js/jquery.js' type='text/javascript'
    script src='js/jquery-ui.js' type='text/javascript'
    script src='js/js.js' type='text/javascript'
    link href='css/card_payment_form.css' rel='stylesheet' type='text/css'
    script src='js/jquery.card_payment_form.js' type='text/javascript'

    / Здесь ваши собственные стили и скрипты.
    / Все ваши файлы должны находиться только в папке {{merchant_id}}
    / link rel='stylesheet' type='text/css' href=css_path('your_css.css')
    / JavaScript запрещен для использования в ваших шаблонах.
    / Все что необходимо кастомизировать в JavaScript шаблона,
    / необходимо закладывать в замыкания при инициализаци card_payment_form плагина.

    javascript:
      $(document).ready(function() {
        function _console_log() {
          #{{'console.log.apply(console, arguments);' unless release?}}
        }

        $('div#card_input_form').card_payment_form({

          // Тип инициализируемой формы
          'form_type' : 'card_form',

          // Здесь так и оставляем, используется, для определения принимаемых типов карт
          'accepted_card_brands' : #{{release? ? "['{{accepted_card_brands}}']" : "['VISA','MASTERCARD']"}},
          'ok_seter': {
            form : function (data, text, forms, fields, validators, settings, ok_setter, error_setter, nothing_setter) {
              _console_log('from: status ok');
              data['info_form'].removeClass('field-error').addClass('field-ok');
              fields.message.text('');
              forms.show_form.apply( this , [ID_INFO_FORM]);
            },
            'card_num_fields' : function (fields, validators, settings, ok_seter, error_seter, nothing_seter) {
              _console_log('card_num_fields: status ok');
              fields.card_num_fields.each(function(i) {
                $(this).removeClass('field-error').addClass('field-ok');
              });
            },
            'card_num' : function (fields, validators, settings, ok_seter, error_seter, nothing_seter) {
              _console_log('card_num: status ok');
              fields.card_num.addClass('field-ok').removeClass('field-error');
            },

            // Используются выставления состояния в полях, когда они правильно заполены
            //
            // card_num_fields - В форме, где несколько полей для ввода номера карты, для полей под ввод номера
            // card_num - В форме, где одно поле для ввода номера карты, для полей под ввод номера
            // exp_date_fields - В форме, где несколько полей для ввода даны истечения срока действия карты, для полей под ввод даты
            // exp_date - В форме, где одно поле для ввода даны истечения срока действия карты, для полей под ввод даты
            // name_on_card - Поле для ввода имени карты
            // card_cvc - Поле для ввода cvc/cvv2
            //
            // 'exp_date_fields' : function (fields, validators, settings, ok_seter, error_seter, nothing_seter) {},
            // 'exp_date' : function (fields, validators, settings, ok_seter, error_seter, nothing_seter) {},
            // 'name_on_card' : function (fields, validators, settings, ok_seter, error_seter, nothing_seter) {},
            // 'card_cvc' : function (fields, validators, settings, ok_seter, error_seter, nothing_seter) {}
          },
          'error_seter': {
            'form' : function (data, text, forms, fields, validators, settings, ok_seter, error_seter, nothing_seter) {
              _console_log('from: status error');
              alert(#{{t('form_config_error').to_json}});
              data['info_form'].addClass('field-error').removeClass('field-ok');
              fields.message.text(text);
              forms.show_form.apply( this , [ID_INFO_FORM]);
            },
            'card_num_fields' : function (fields, validators, settings, ok_setter, error_setter, nothing_setter) {
              _console_log('card_num_fields: status error');
              fields.card_num_fields.each(function(i) {
                $(this).removeClass('field-ok').addClass('field-error');
              });
            },
            'card_num' : function (fields, validators, settings, ok_seter, error_seter, nothing_seter) {
              _console_log('card_num: status error');
              alert(#{{t('card_number_error').to_json}});
              fields.card_num.removeClass('field-ok').addClass('field-error');
            },

            // Используются выставления состояния в полях, когда они не правильно заполены
            //
            // form - ошибки самой формы
            // card_num_fields - В форме, где несколько полей для ввода номера карты, для полей под ввод номера
            // card_num - В форме, где одно поле для ввода номера карты, для полей под ввод номера
            // exp_date_fields - В форме, где несколько полей для ввода даны истечения срока действия карты, для полей под ввод даты
            // exp_date - В форме, где одно поле для ввода даны истечения срока действия карты, для полей под ввод даты
            // name_on_card - Поле для ввода имени карты
            // card_cvc - Поле для ввода cvc/cvv2
            //
            // exp_date_fields : function (fields, validators, settings, ok_seter, error_seter, nothing_seter) {},
            // exp_date : function (fields, validators, settings, ok_seter, error_seter, nothing_seter) {},
            // name_on_card : function (fields, validators, settings, ok_seter, error_seter, nothing_seter) {},
            // card_cvc : function (fields, validators, settings, ok_seter, error_seter, nothing_seter) {}
          },
          'nothing_seter' : {
            'form' : function (data, text, forms, fields, validators, settings, ok_setter, error_setter, nothing_setter) {
              _console_log('from: status nothing');
              data['info_form'].removeClass('field-error').removeClass('field-ok');
              fields.message.text('');
              forms.show_form.apply( this , [ID_INFO_FORM]);
            },
            'card_num_fields' : function (fields, validators, settings, ok_setter, error_setter, nothing_setter) {
              _console_log('card_num_fields: status nothing');
              fields.card_num_fields.each(function(i) {
                $(this).removeClass('field-ok').removeClass('field-error');
              });
            },
            'card_num' : function (fields, validators, settings, ok_seter, error_seter, nothing_seter) {
              _console_log('card_num: status nothing');
              fields.card_num.removeClass('field-ok').removeClass('field-error');
            },

            // Используются выставления состояния в полях, когда они не заполнены
            //
            // card_num_fields - В форме, где несколько полей для ввода номера карты, для полей под ввод номера
            // card_num - В форме, где одно поле для ввода номера карты, для полей под ввод номера
            // exp_date_fields - В форме, где несколько полей для ввода даны истечения срока действия карты, для полей под ввод даты
            // exp_date - В форме, где одно поле для ввода даны истечения срока действия карты, для полей под ввод даты
            // name_on_card - Поле для ввода имени карты
            // card_cvc - Поле для ввода cvc/cvv2
            //
            // exp_date : function (fields, validators, settings, ok_seter, error_seter, nothing_seter) {},
            // name_on_card : function (fields, validators, settings, ok_seter, error_seter, nothing_seter) {},
            // card_cvc : function (fields, validators, settings, ok_seter, error_seter, nothing_seter) {}
          },
          'handlers' : {
            'card_num_fields': function(fields, validators, settings, ok_setter, error_setter, nothing_setter) {
              this.value = this.value.replace(/[^0-9]/g, '');

              var cardNum = '';
              fields.card_num_fields.each(function(i) {
                cardNum += $(this).val();
              });

              if(cardNum.length >= settings.min_card_number_length && cardNum.length <= settings.max_card_number_length)
                if(validators.card_num( cardNum , settings)) ok_setter.card_num_fields.apply(this, [fields, validators, settings, ok_setter, error_setter, nothing_setter]);
                else error_setter.card_num_fields.apply(this, [fields, validators, settings, ok_setter, error_setter, nothing_setter]);
              else nothing_setter.card_num_fields.apply(this, [fields, validators, settings, ok_setter, error_setter, nothing_setter]);
            },
            'card_num': function(fields, validators, settings, ok_setter, error_setter, nothing_setter) {
              var value = this.value = this.value.replace(/[^0-9 -]/g, '');

              if(value.length >= settings.min_card_number_length && value.length <= settings.max_card_number_length)
                if(validators.card_num( value , settings)) ok_setter.card_num.apply(this, [fields, validators, settings, ok_setter, error_setter, nothing_setter]);
                else error_setter.card_num.apply(this, [fields, validators, settings, ok_setter, error_setter, nothing_setter]);
              else
                nothing_setter.card_num.apply(this, [fields, validators, settings, ok_setter, error_setter, nothing_setter]);
            },

            // Срабатывают по событию keyip
            //
            // card_num_fields - В форме, где несколько полей для ввода номера карты, для полей под ввод номера
            // card_num - В форме, где одно поле для ввода номера карты, для полей под ввод номера
            // exp_date_fields - В форме, где несколько полей для ввода даны истечения срока действия карты, для полей под ввод даты
            // exp_date - В форме, где одно поле для ввода даны истечения срока действия карты, для полей под ввод даты
            // name_on_card - Поле для ввода имени карты
            // card_cvc - Поле для ввода cvc/cvv2
            //
            // exp_date_fields : function (fields, validators, settings, ok_seter, error_seter, nothing_seter) {},
            // exp_date : function (fields, validators, settings, ok_seter, error_seter, nothing_seter) {},
            // name_on_card : function (fields, validators, settings, ok_seter, error_seter, nothing_seter) {},
            // card_cvc : function (fields, validators, settings, ok_seter, error_seter, nothing_seter) {}
          },
          'validators' : {
            'card_num': function( cardNumber, settings) {
              // accept only spaces, digits and dashes
              if (/[^0-9 -]+/.test(cardNumber))
                return false;

              cardNumber = cardNumber.replace(/\D/g, '');
              if(cardNumber.length < settings.min_card_number_length || cardNumber.length >  settings.max_card_number_length)
                return false;

              return true;
            },

            // Валидаторы данных полей
            //
            // card_num - В форме, где одно поле для ввода номера карты, для полей под ввод номера
            // exp_date - В форме, где одно поле для ввода даны истечения срока действия карты, для полей под ввод даты
            // name_on_card - Поле для ввода имени карты
            // card_cvc - Поле для ввода cvc/cvv2
            //
            // exp_date_fields : function (fields, validators, settings, ok_seter, error_seter, nothing_seter) {},
            // exp_date : function (strExpDate, settings) {},
            // name_on_card : function (strNameOnCard, settings) {},
            // card_cvc : function (strCardCvc, settings) {}
          },
        });
      });
  <body {{_onload}}>
    .main: .wizard: .wizard-step1
      /-- --
      h1= t('header')
      p &nbsp;
      #card_input_form
        form method='POST'
          h3 #{t('you_pay')}:
          .wiz-block
           | {{description}}
          h3 #{t('amount')}:
          - if options.gds
            <!--WITH_GDS_ONLY-->
            .wiz-block
              => t('bill_amount')
              | {{amount_whithout_commission}} {{currency}}
              br
              => t('agent_fee')
              | {{markup}} {{currency}}
              br
              .wiz-block-all
                => t('total')
                | {{amount_to_pay}} {{currency}}
            .alert
              => t('gds_warning')
              | (
              a href='/info/gds_russian_standart_why_paid_in_two_stages/ru/mini' target='_blank'
                = t('gds_why')
              | )
            p &nbsp;
            <!--/WITH_GDS_ONLY-->
          - else
            <!--WITHOUT_GDS_ONLY-->
            .wiz-block: .wiz-block-all
              => t('bill_amount')
              | {{amount_to_pay}} {{currency}}
            p &nbsp;
            <!--/WITHOUT_GDS_ONLY-->

          /-- error --
          <!--_error-->
          p.alert: b
            | {{_error}}
          <!--/_error-->
          .card-left
            br
            table.card-left-table: tr
              - { \
                VISA:        :visa,
                MASTERCARD:  :master,
                AMEX:        :americanex,
                DINERS:      :master,
                JCB:         :jcb,
              }.each do |type, img|
                <!--ACCEPTED_CARD_BRAND_#{type}-->
                td: p &nbsp;
                td: p: img alt='' src="images/card-#{img}.png"
                <!--/ACCEPTED_CARD_BRAND_#{type}-->
            br
            - (1..4).each do |i|
              p: input.card-num id="card_num_#{i}" autocomplete='off' maxlength='4' name="card_num_#{i}" type='text'
            .card-title= t('exp_date')
            p: select.card-date name='exp_month'
              option value='' = t('month_placeholder')
              - if release?
                | {{select exp_month}}
              - else
                - (1..12).each do |i|
                  - i = format('%02d', i)
                  option.dimmed value=i = i
            p: select.card-date name='exp_year'
              option value='' = t('year_placeholder')
              - if release?
                | {{select exp_year}}
              - else
                - (2013..2023).each do |i|
                  option.dimmed value=i = i
            .card-title= t('cardholder')
            p: input.card-fio name='name_on_card' type='text'
          .card-right
            .card-right-line align='center' &nbsp;
            table.card-right-table
              tr
                td
                td CVV/CVC
              tr
                td: a href='/info/cvc_and_batch/ru/mini' target='_blank' = t('what_is_it')
                td: p: input.card-cvc autocomplete='off' name='card_cvc' type='text'
                / value='{{card_cvc}}'
          .c
          p: input.pay type='submit' value=t('pay')
          br
      .c
      .push
  </body>
